# backend/services/trade_engine.py
import asyncio
import uuid
from typing import Dict, List, Optional
from datetime import datetime, timedelta
import logging
from collections import defaultdict

from services.exchange_service import ExchangeService
from models.schemas import TradeStatus, TradeSide, LogType

logger = logging.getLogger(__name__)

class TradeEngine:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    def __init__(self, exchange_service: ExchangeService):
        self.exchange_service = exchange_service
        self.active_bots: Dict[str, bool] = {}  # {user_id: is_running}
        self.bot_tasks: Dict[str, asyncio.Task] = {}  # {user_id: task}
        self.user_settings: Dict[str, Dict] = {}  # {user_id: settings}
        self.trade_params: Dict[str, Dict] = {}  # {user_id: params}
        self.active_trades: Dict[str, List[Dict]] = defaultdict(list)  # {user_id: [trades]}
        self.trade_history: Dict[str, List[Dict]] = defaultdict(list)  # {user_id: [completed_trades]}
        self.bot_logs: Dict[str, List[Dict]] = defaultdict(list)  # {user_id: [logs]}
        self.pnl_data: Dict[str, Dict] = {}  # {user_id: {total_pnl, pnl_percent}}
    
    async def start_trading(self, user_id: str, settings: Dict, params: Dict):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if user_id in self.active_bots and self.active_bots[user_id]:
                raise ValueError("Bot is already running")
            
            self.user_settings[user_id] = settings
            self.trade_params[user_id] = params
            self.active_bots[user_id] = True
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PnL
            if user_id not in self.pnl_data:
                self.pnl_data[user_id] = {
                    'total_pnl': 0.0,
                    'pnl_percent': 0.0,
                    'trades_count': 0,
                    'start_time': datetime.now()
                }
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç
            await self._add_log(user_id, LogType.SUCCESS, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–∫–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
            if settings['trade_type'] == 'arbitrage':
                task = asyncio.create_task(self._arbitrage_loop(user_id))
            else:
                task = asyncio.create_task(self._margin_trading_loop(user_id))
            
            self.bot_tasks[user_id] = task
            logger.info(f"Trading bot started for user {user_id}")
            
        except Exception as e:
            logger.error(f"Error starting trading bot: {str(e)}")
            raise
    
    async def stop_trading(self, user_id: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if user_id in self.active_bots:
                self.active_bots[user_id] = False
                
                # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
                if user_id in self.bot_tasks:
                    self.bot_tasks[user_id].cancel()
                    try:
                        await self.bot_tasks[user_id]
                    except asyncio.CancelledError:
                        pass
                    del self.bot_tasks[user_id]
                
                await self._add_log(user_id, LogType.INFO, "‚è∏Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                logger.info(f"Trading bot stopped for user {user_id}")
                
        except Exception as e:
            logger.error(f"Error stopping trading bot: {str(e)}")
            raise
    
    async def _arbitrage_loop(self, user_id: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        await self._add_log(user_id, LogType.SEARCH, "üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–∞...")
        
        while self.active_bots.get(user_id, False):
            try:
                params = self.trade_params[user_id]
                settings = self.user_settings[user_id]
                coin = params.get('coin', 'BTC')
                
                # –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                await self._add_log(user_id, LogType.SEARCH, f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–ø—Ä–µ–¥—ã –Ω–∞ {coin}/USDT –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏...")
                
                opportunities = await self.exchange_service.find_arbitrage_opportunities(
                    user_id, 
                    coin, 
                    params.get('min_profit_threshold', 0.3)
                )
                
                if opportunities:
                    best_opp = opportunities[0]
                    spread = best_opp['spread_percent']
                    
                    await self._add_log(
                        user_id, 
                        LogType.SUCCESS, 
                        f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å! –°–ø—Ä–µ–¥: {spread:.2f}% ({best_opp['buy_exchange']} ‚Üí {best_opp['sell_exchange']})"
                    )
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É
                    await self._execute_arbitrage(user_id, best_opp, params)
                    
                else:
                    await self._add_log(user_id, LogType.SEARCH, "‚è≥ –°–ø—Ä–µ–¥ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∞—Å—Ç–æ—Ç—ã
                frequency_delays = {'low': 30, 'medium': 15, 'high': 5}
                delay = frequency_delays.get(params.get('frequency', 'medium'), 15)
                await asyncio.sleep(delay)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in arbitrage loop: {str(e)}")
                await self._add_log(user_id, LogType.ERROR, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                await asyncio.sleep(10)
    
    async def _execute_arbitrage(self, user_id: str, opportunity: Dict, params: Dict):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É"""
        try:
            coin = opportunity['coin']
            buy_exchange = opportunity['buy_exchange']
            sell_exchange = opportunity['sell_exchange']
            buy_price = opportunity['buy_price']
            sell_price = opportunity['sell_price']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
            order_size_usd = params.get('order_size', 100)
            amount = order_size_usd / buy_price
            
            trade_id = str(uuid.uuid4())
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–µ
            active_trade = {
                'id': trade_id,
                'user_id': user_id,
                'coin': coin,
                'trade_type': '–ê—Ä–±–∏—Ç—Ä–∞–∂',
                'entry_price': buy_price,
                'current_price': buy_price,
                'amount': amount,
                'pnl': 0.0,
                'pnl_percent': 0.0,
                'status': 'active',
                'exchanges': [buy_exchange, sell_exchange],
                'opened_at': datetime.now(),
                'updated_at': datetime.now()
            }
            self.active_trades[user_id].append(active_trade)
            
            # –®–ê–ì 1: –ü–æ–∫—É–ø–∫–∞ –Ω–∞ –ø–µ—Ä–≤–æ–π –±–∏—Ä–∂–µ
            await self._add_log(
                user_id, 
                LogType.BUY, 
                f"üí∞ –ü–æ–∫—É–ø–∞—é {amount:.4f} {coin} –Ω–∞ {buy_exchange} –ø–æ ${buy_price:.2f}"
            )
            
            try:
                # buy_order = await self.exchange_service.create_market_order(
                #     user_id, buy_exchange, coin, 'buy', amount
                # )
                await asyncio.sleep(2)  # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
            except Exception as e:
                await self._add_log(user_id, LogType.ERROR, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}")
                self.active_trades[user_id].remove(active_trade)
                return
            
            # –®–ê–ì 2: –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            await self._add_log(
                user_id, 
                LogType.TRANSFER, 
                f"üì§ –ü–µ—Ä–µ–≤–æ–∂—É {amount:.4f} {coin}: {buy_exchange} ‚Üí {sell_exchange}"
            )
            await asyncio.sleep(3)  # –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
            
            # –®–ê–ì 3: –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –±–∏—Ä–∂–µ
            await self._add_log(
                user_id, 
                LogType.SELL, 
                f"üí∏ –ü—Ä–æ–¥–∞—é {amount:.4f} {coin} –Ω–∞ {sell_exchange} –ø–æ ${sell_price:.2f}"
            )
            
            try:
                # sell_order = await self.exchange_service.create_market_order(
                #     user_id, sell_exchange, coin, 'sell', amount
                # )
                await asyncio.sleep(2)  # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
            except Exception as e:
                await self._add_log(user_id, LogType.ERROR, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {str(e)}")
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏—Ç
            profit_usd = (sell_price - buy_price) * amount
            profit_percent = ((sell_price - buy_price) / buy_price) * 100
            
            # –û–±–Ω–æ–≤–ª—è–µ–º PnL
            self.pnl_data[user_id]['total_pnl'] += profit_usd
            self.pnl_data[user_id]['trades_count'] += 1
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–¥–µ–ª–∫—É
            completed_trade = {
                **active_trade,
                'exit_price': sell_price,
                'pnl': profit_usd,
                'pnl_percent': profit_percent,
                'status': 'completed',
                'closed_at': datetime.now()
            }
            
            self.active_trades[user_id].remove(active_trade)
            self.trade_history[user_id].append(completed_trade)
            
            await self._add_log(
                user_id, 
                LogType.PROFIT, 
                f"üéâ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ—Ñ–∏—Ç: +${profit_usd:.2f} ({profit_percent:.2f}%)"
            )
            
            logger.info(f"Arbitrage trade completed: ${profit_usd:.2f}")
            
        except Exception as e:
            logger.error(f"Error executing arbitrage: {str(e)}")
            await self._add_log(user_id, LogType.ERROR, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {str(e)}")
    
    async def _margin_trading_loop(self, user_id: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        await self._add_log(user_id, LogType.SEARCH, "üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        
        while self.active_bots.get(user_id, False):
            try:
                params = self.trade_params[user_id]
                settings = self.user_settings[user_id]
                coin = params.get('coin', 'BTC')
                
                await self._add_log(user_id, LogType.SEARCH, f"üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫–∏ {coin}/USDT...")
                
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
                # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strategy = settings.get('strategy')
                
                # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
                await asyncio.sleep(10)
                
                # –°–ª—É—á–∞–π–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—à–ª–∏ –ª–∏ –º—ã —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
                import random
                if random.random() > 0.7:
                    await self._add_log(user_id, LogType.SUCCESS, "‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞!")
                    await self._execute_margin_trade(user_id, params)
                else:
                    await self._add_log(user_id, LogType.SEARCH, "‚è≥ –ñ–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞...")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞
                frequency_delays = {'low': 60, 'medium': 30, 'high': 10}
                delay = frequency_delays.get(params.get('frequency', 'medium'), 30)
                await asyncio.sleep(delay)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in margin trading loop: {str(e)}")
                await asyncio.sleep(10)
    
    async def _execute_margin_trade(self, user_id: str, params: Dict):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É"""
        # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∞—Ä–±–∏—Ç—Ä–∞–∂—É, –Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏
        pass
    
    async def _add_log(self, user_id: str, log_type: LogType, message: str):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ –±–æ—Ç–∞"""
        log = {
            'id': str(uuid.uuid4()),
            'user_id': user_id,
            'timestamp': datetime.now(),
            'time': datetime.now().strftime('%H:%M:%S'),
            'log_type': log_type.value if isinstance(log_type, LogType) else log_type,
            'type': log_type.value if isinstance(log_type, LogType) else log_type,
            'message': message,
            'status': 'active' if log_type == LogType.SEARCH else 'completed'
        }
        self.bot_logs[user_id].insert(0, log)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
        if len(self.bot_logs[user_id]) > 100:
            self.bot_logs[user_id] = self.bot_logs[user_id][:100]
    
    async def get_status(self, user_id: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        return {
            'is_running': self.active_bots.get(user_id, False),
            'active_trades_count': len(self.active_trades.get(user_id, [])),
            'total_trades': self.pnl_data.get(user_id, {}).get('trades_count', 0),
            'total_pnl': self.pnl_data.get(user_id, {}).get('total_pnl', 0),
            'pnl_percent': self.pnl_data.get(user_id, {}).get('pnl_percent', 0)
        }
    
    async def update_parameters(self, user_id: str, params: Dict):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.trade_params[user_id] = params
        await self._add_log(user_id, LogType.INFO, "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    async def get_active_trades(self, user_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏"""
        return self.active_trades.get(user_id, [])
    
    async def get_trade_history(self, user_id: str, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫"""
        history = self.trade_history.get(user_id, [])
        return history[:limit]
    
    async def get_pnl_data(self, user_id: str, period: str = "24h") -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ PnL"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        pnl_chart = []
        now = datetime.now()
        
        for i in range(24):
            pnl_chart.append({
                'timestamp': (now - timedelta(hours=23-i)).isoformat(),
                'time': f"{i}:00",
                'pnl': self.pnl_data.get(user_id, {}).get('total_pnl', 0) * (i + 1) / 24,
                'pnl_percent': self.pnl_data.get(user_id, {}).get('pnl_percent', 0) * (i + 1) / 24
            })
        
        return {
            'chart_data': pnl_chart,
            'total_pnl': self.pnl_data.get(user_id, {}).get('total_pnl', 0),
            'pnl_percent': self.pnl_data.get(user_id, {}).get('pnl_percent', 0)
        }
    
    async def get_statistics(self, user_id: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        history = self.trade_history.get(user_id, [])
        
        if not history:
            return {
                'total_trades': 0,
                'successful_trades': 0,
                'failed_trades': 0,
                'win_rate': 0,
                'total_pnl': 0,
                'best_trade': 0,
                'worst_trade': 0,
                'trades_today': 0
            }
        
        successful_trades = [t for t in history if t.get('pnl', 0) > 0]
        failed_trades = [t for t in history if t.get('pnl', 0) < 0]
        
        today = datetime.now().date()
        trades_today = [t for t in history if t.get('closed_at', datetime.now()).date() == today]
        
        return {
            'total_trades': len(history),
            'successful_trades': len(successful_trades),
            'failed_trades': len(failed_trades),
            'win_rate': (len(successful_trades) / len(history) * 100) if history else 0,
            'total_pnl': sum(t.get('pnl', 0) for t in history),
            'best_trade': max((t.get('pnl', 0) for t in history), default=0),
            'worst_trade': min((t.get('pnl', 0) for t in history), default=0),
            'trades_today': len(trades_today),
            'pnl_today': sum(t.get('pnl', 0) for t in trades_today)
        }
    
    async def get_live_updates(self, user_id: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è WebSocket"""
        return {
            'type': 'update',
            'data': {
                'pnl': self.pnl_data.get(user_id, {}).get('total_pnl', 0),
                'pnl_percent': self.pnl_data.get(user_id, {}).get('pnl_percent', 0),
                'active_trades': self.active_trades.get(user_id, []),
                'latest_logs': self.bot_logs.get(user_id, [])[:10],
                'is_running': self.active_bots.get(user_id, False)
            },
            'timestamp': datetime.now().isoformat()
        }
